project(':wheeler-compiler') {
    configurations {
        antlrGenerator
    }

    dependencies {
        antlr 'org.antlr:antlr4:4.13.1'
        implementation 'org.antlr:antlr4-runtime:4.13.1'
        implementation project(':wheeler-core')
    }

    def antlrOutputDir = file("${buildDir}/generated-src/antlr/main/com/typeobject/wheeler/compiler/antlr")
    def antlrPath = 'com/typeobject/wheeler/compiler/antlr'
    def antlrSourceDir = file("src/main/antlr")

    // Generate lexer and tokens first
    task generateLexerGrammarSource(type: AntlrTask) {
        maxHeapSize = "64m"
        arguments += [
            '-visitor',
            '-no-listener',
            '-package', 'com.typeobject.wheeler.compiler.antlr'
        ]
        source = fileTree(antlrSourceDir) {
            include "${antlrPath}/WheelerTypes.g4"
            include "${antlrPath}/WheelerKeywords.g4"
            include "${antlrPath}/WheelerOperators.g4"
            include "${antlrPath}/WheelerLexer.g4"
        }
        outputDirectory = antlrOutputDir
    }

    // Copy tokens file - separate task to ensure it completes
    task copyTokensFile(type: Copy) {
        dependsOn generateLexerGrammarSource
        from(antlrOutputDir) {
            include 'WheelerLexer.tokens'
        }
        into "${antlrSourceDir}/${antlrPath}"
    }

    // Generate parser using tokens file
    task generateParserGrammarSource(type: AntlrTask) {
        dependsOn copyTokensFile
        inputs.files copyTokensFile.outputs.files
        maxHeapSize = "64m"
        arguments += [
            '-visitor',
            '-no-listener',
            '-package', 'com.typeobject.wheeler.compiler.antlr'
        ]
        source = fileTree(antlrSourceDir) {
            include "${antlrPath}/WheelerParser.g4"
        }
        outputDirectory = antlrOutputDir
    }

    // Cleanup tokens file after build
    task cleanupTokens(type: Delete) {
        delete "${antlrSourceDir}/${antlrPath}/WheelerLexer.tokens"
    }

    // Disable default ANTLR task
    generateGrammarSource {
        enabled = false
    }

    // Set up task dependencies
    generateGrammarSource.dependsOn generateParserGrammarSource
    generateParserGrammarSource.finalizedBy cleanupTokens

    sourceSets {
        main {
            java {
                srcDirs += ["${buildDir}/generated-src/antlr/main"]
            }
        }
    }

    compileJava {
        dependsOn generateGrammarSource
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone {
            excludedPaths = '.*/generated-src/.*'
        }
    }

    spotless {
        java {
            targetExclude 'build/**', '**/generated-src/**'
        }
    }
}
